// This file was generated by counterfeiter
package webfakes

import "sync"

type FakeOfficeLocatorInterface struct {
	NearestStub        func(ipAddress string) (slug string, err error)
	nearestMutex       sync.RWMutex
	nearestArgsForCall []struct {
		ipAddress string
	}
	nearestReturns struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOfficeLocatorInterface) Nearest(ipAddress string) (slug string, err error) {
	fake.nearestMutex.Lock()
	fake.nearestArgsForCall = append(fake.nearestArgsForCall, struct {
		ipAddress string
	}{ipAddress})
	fake.recordInvocation("Nearest", []interface{}{ipAddress})
	fake.nearestMutex.Unlock()
	if fake.NearestStub != nil {
		return fake.NearestStub(ipAddress)
	}
	return fake.nearestReturns.result1, fake.nearestReturns.result2
}

func (fake *FakeOfficeLocatorInterface) NearestCallCount() int {
	fake.nearestMutex.RLock()
	defer fake.nearestMutex.RUnlock()
	return len(fake.nearestArgsForCall)
}

func (fake *FakeOfficeLocatorInterface) NearestArgsForCall(i int) string {
	fake.nearestMutex.RLock()
	defer fake.nearestMutex.RUnlock()
	return fake.nearestArgsForCall[i].ipAddress
}

func (fake *FakeOfficeLocatorInterface) NearestReturns(result1 string, result2 error) {
	fake.NearestStub = nil
	fake.nearestReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeOfficeLocatorInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nearestMutex.RLock()
	defer fake.nearestMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeOfficeLocatorInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
