// This file was generated by counterfeiter
package locatorfakes

import (
	"net"
	"sync"

	geoip2 "github.com/oschwald/geoip2-golang"
)

type FakeIpCityDBInterface struct {
	CityStub        func(net.IP) (*geoip2.City, error)
	cityMutex       sync.RWMutex
	cityArgsForCall []struct {
		arg1 net.IP
	}
	cityReturns struct {
		result1 *geoip2.City
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIpCityDBInterface) City(arg1 net.IP) (*geoip2.City, error) {
	fake.cityMutex.Lock()
	fake.cityArgsForCall = append(fake.cityArgsForCall, struct {
		arg1 net.IP
	}{arg1})
	fake.recordInvocation("City", []interface{}{arg1})
	fake.cityMutex.Unlock()
	if fake.CityStub != nil {
		return fake.CityStub(arg1)
	}
	return fake.cityReturns.result1, fake.cityReturns.result2
}

func (fake *FakeIpCityDBInterface) CityCallCount() int {
	fake.cityMutex.RLock()
	defer fake.cityMutex.RUnlock()
	return len(fake.cityArgsForCall)
}

func (fake *FakeIpCityDBInterface) CityArgsForCall(i int) net.IP {
	fake.cityMutex.RLock()
	defer fake.cityMutex.RUnlock()
	return fake.cityArgsForCall[i].arg1
}

func (fake *FakeIpCityDBInterface) CityReturns(result1 *geoip2.City, result2 error) {
	fake.CityStub = nil
	fake.cityReturns = struct {
		result1 *geoip2.City
		result2 error
	}{result1, result2}
}

func (fake *FakeIpCityDBInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cityMutex.RLock()
	defer fake.cityMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeIpCityDBInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
