// This file was generated by counterfeiter
package locatorfakes

import "sync"

type FakeIpResolverInterface struct {
	ResolveCityStub        func(ip string) (lat, long float64, err error)
	resolveCityMutex       sync.RWMutex
	resolveCityArgsForCall []struct {
		ip string
	}
	resolveCityReturns struct {
		result1 float64
		result2 float64
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIpResolverInterface) ResolveCity(ip string) (lat, long float64, err error) {
	fake.resolveCityMutex.Lock()
	fake.resolveCityArgsForCall = append(fake.resolveCityArgsForCall, struct {
		ip string
	}{ip})
	fake.recordInvocation("ResolveCity", []interface{}{ip})
	fake.resolveCityMutex.Unlock()
	if fake.ResolveCityStub != nil {
		return fake.ResolveCityStub(ip)
	}
	return fake.resolveCityReturns.result1, fake.resolveCityReturns.result2, fake.resolveCityReturns.result3
}

func (fake *FakeIpResolverInterface) ResolveCityCallCount() int {
	fake.resolveCityMutex.RLock()
	defer fake.resolveCityMutex.RUnlock()
	return len(fake.resolveCityArgsForCall)
}

func (fake *FakeIpResolverInterface) ResolveCityArgsForCall(i int) string {
	fake.resolveCityMutex.RLock()
	defer fake.resolveCityMutex.RUnlock()
	return fake.resolveCityArgsForCall[i].ip
}

func (fake *FakeIpResolverInterface) ResolveCityReturns(result1 float64, result2 float64, result3 error) {
	fake.ResolveCityStub = nil
	fake.resolveCityReturns = struct {
		result1 float64
		result2 float64
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeIpResolverInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.resolveCityMutex.RLock()
	defer fake.resolveCityMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeIpResolverInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
